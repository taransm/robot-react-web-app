{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","onBgChange1","bgcolor1","onBgChange2","bgcolor2","fetch","then","response","json","users","colorChange","document","body","background","filteredRobots","filter","robot","toLowerCase","includes","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.66786ee8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n// if(true){\n//   throw new Error('Nooo!')\n// }\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='Search Robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n     <div style={{overflow: 'scroll',  height: '800px'}}>\n    \n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React from 'react';\nimport { Component } from 'react';\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n    render() {\n        if (this.state.hasError) {\n            return <h1>Opps. This should not have happened</h1>\n        }\n        return this.props.children;\n    }\n}\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport ErrorBoundary from '../components/ErrorBoundary'\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: '',\n      bgcolor1: '#8da0a0',\n      bgcolor2: '#071B52'\n\n    }\n  }\n\n  componentDidMount() {\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => { this.setState({ robots: users }) });\n  }\n  componentDidUpdate() {\n    let colorChange = `linear-gradient(to right, ${this.state.bgcolor1}, ${this.state.bgcolor2}`\n\n    document.body.style.background = colorChange;\n\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  }\n  onBgChange1 = (event) => {\n    this.setState({ bgcolor1: event.target.value })\n\n  }\n  onBgChange2 = (event) => {\n    this.setState({ bgcolor2: event.target.value })\n\n  }\n  render() {\n    const { robots, searchfield, bgcolor2, bgcolor1 } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc' >\n          <h1 className='f1  hover-navy ' >RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <div className=' tc'>\n            <p className='dib v-mid pokemon awesome f4 ttu tracked-mega mt0 b' >Change Background</p>\n          <input type='color' value={bgcolor1} className='grow pa0 ma2 ' onChange={this.onBgChange1}></input>\n          <input type='color' value={bgcolor2} className='grow pa0 ma2 ' onChange={this.onBgChange2}></input>\n          </div>\n          \n          <hr className='style-one'></hr>\n\n          <Scroll >\n\n            <ErrorBoundary>\n\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n\n          </Scroll>\n\n\n        </div>\n      );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}